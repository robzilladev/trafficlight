/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package trafficlight;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import javax.swing.ImageIcon;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.Timer;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 * @author rob
 */
public class TrafficLightMain extends javax.swing.JFrame
{
    ImageIcon lightLabel = new javax.swing.ImageIcon(getClass().getResource("lights.png"));
    ImageIcon darkArrow = new javax.swing.ImageIcon(getClass().getResource("darkarrow.png"));
    ImageIcon greenArrow = new javax.swing.ImageIcon(getClass().getResource("greenarrow.png"));
    ImageIcon redArrow = new javax.swing.ImageIcon(getClass().getResource("redarrow.png"));
    
    String currentLight = "green";
    
    int greenTime, orangeTime, redTime;
    
    boolean green = true;
    boolean shutDown = false;
    boolean initial = true;
    
    SliderListener sl;
    ButtonListener bl;
    TimerListener tl = new TimerListener();
    
    Timer t;
    
    Color orangeOn = new Color(255,145,0);
    
    /**
     * Creates new form TrafficLightMain
     */
    public TrafficLightMain()
    {
        greenTime = 10; orangeTime = 10; redTime = 10;
        
        initComponents();
        
        sl = new SliderListener();
        bl = new ButtonListener();
        greenSlider.addChangeListener(sl);
        orangeSlider.addChangeListener(sl);
        redSlider.addChangeListener(sl);
        
        t = new Timer(1000, tl);
        
        startButton.addActionListener(bl);
        stopButton.addActionListener(bl);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        greenSlider = new javax.swing.JSlider();
        orangeSlider = new javax.swing.JSlider();
        redSlider = new javax.swing.JSlider();
        jPanel5 = new lightPanel();
        jPanel4 = new javax.swing.JPanel();
        startButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        backgroundPanel = new javax.swing.JPanel();
        actualLightPanel = new trafficLightPanel();
        jPanel8 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        timeLabel = new javax.swing.JLabel();
        javax.swing.JPanel arrowPanel = new arrowPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowFocusListener(new java.awt.event.WindowFocusListener()
        {
            public void windowGainedFocus(java.awt.event.WindowEvent evt)
            {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt)
            {
                formWindowLostFocus(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));
        jPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        jPanel1.setPreferredSize(new java.awt.Dimension(200, 200));
        jPanel1.setLayout(new java.awt.BorderLayout(0, 10));

        jPanel3.setBackground(new java.awt.Color(204, 204, 204));
        jPanel3.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        jPanel3.setPreferredSize(new java.awt.Dimension(220, 100));
        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel6.setBackground(new java.awt.Color(255, 255, 102));
        jPanel6.setLayout(new java.awt.GridLayout(1, 0));

        greenSlider.setBackground(new java.awt.Color(204, 204, 204));
        greenSlider.setForeground(new java.awt.Color(0, 0, 0));
        greenSlider.setMajorTickSpacing(5);
        greenSlider.setMaximum(30);
        greenSlider.setMinimum(5);
        greenSlider.setMinorTickSpacing(5);
        greenSlider.setOrientation(javax.swing.JSlider.VERTICAL);
        greenSlider.setPaintLabels(true);
        greenSlider.setPaintTicks(true);
        greenSlider.setSnapToTicks(true);
        greenSlider.setValue(5);
        jPanel6.add(greenSlider);

        orangeSlider.setBackground(new java.awt.Color(204, 204, 204));
        orangeSlider.setForeground(new java.awt.Color(0, 0, 0));
        orangeSlider.setMajorTickSpacing(5);
        orangeSlider.setMaximum(30);
        orangeSlider.setMinimum(5);
        orangeSlider.setMinorTickSpacing(5);
        orangeSlider.setOrientation(javax.swing.JSlider.VERTICAL);
        orangeSlider.setPaintLabels(true);
        orangeSlider.setPaintTicks(true);
        orangeSlider.setSnapToTicks(true);
        orangeSlider.setValue(5);
        jPanel6.add(orangeSlider);

        redSlider.setBackground(new java.awt.Color(204, 204, 204));
        redSlider.setForeground(new java.awt.Color(0, 0, 0));
        redSlider.setMajorTickSpacing(5);
        redSlider.setMaximum(30);
        redSlider.setMinimum(5);
        redSlider.setMinorTickSpacing(5);
        redSlider.setOrientation(javax.swing.JSlider.VERTICAL);
        redSlider.setPaintLabels(true);
        redSlider.setPaintTicks(true);
        redSlider.setSnapToTicks(true);
        redSlider.setValue(5);
        jPanel6.add(redSlider);

        jPanel3.add(jPanel6, java.awt.BorderLayout.CENTER);

        jPanel5.setBackground(new java.awt.Color(51, 51, 51));
        jPanel5.setPreferredSize(new java.awt.Dimension(100, 40));
        jPanel5.setLayout(new java.awt.GridLayout(1, 0));
        jPanel3.add(jPanel5, java.awt.BorderLayout.SOUTH);

        jPanel1.add(jPanel3, java.awt.BorderLayout.CENTER);

        jPanel4.setBackground(new java.awt.Color(204, 204, 204));
        jPanel4.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 5, 20, 5));
        jPanel4.setPreferredSize(new java.awt.Dimension(80, 80));
        jPanel4.setLayout(new java.awt.GridLayout(1, 2, 10, 10));

        startButton.setBackground(new java.awt.Color(51, 51, 51));
        startButton.setForeground(new java.awt.Color(255, 255, 255));
        startButton.setText("START");
        startButton.setBorderPainted(false);
        jPanel4.add(startButton);

        stopButton.setBackground(new java.awt.Color(51, 51, 51));
        stopButton.setForeground(new java.awt.Color(255, 255, 255));
        stopButton.setText("STOP");
        stopButton.setBorderPainted(false);
        jPanel4.add(stopButton);

        jPanel1.add(jPanel4, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.WEST);

        backgroundPanel.setBackground(new java.awt.Color(51, 255, 0));
        backgroundPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        backgroundPanel.setPreferredSize(new java.awt.Dimension(300, 300));
        backgroundPanel.setLayout(new java.awt.BorderLayout());

        actualLightPanel.setBackground(new java.awt.Color(153, 153, 153));
        actualLightPanel.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                actualLightPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout actualLightPanelLayout = new javax.swing.GroupLayout(actualLightPanel);
        actualLightPanel.setLayout(actualLightPanelLayout);
        actualLightPanelLayout.setHorizontalGroup(
            actualLightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 380, Short.MAX_VALUE)
        );
        actualLightPanelLayout.setVerticalGroup(
            actualLightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 180, Short.MAX_VALUE)
        );

        backgroundPanel.add(actualLightPanel, java.awt.BorderLayout.CENTER);

        jPanel8.setBackground(new java.awt.Color(204, 204, 204));
        jPanel8.setLayout(new java.awt.BorderLayout());

        jPanel9.setBackground(new java.awt.Color(102, 255, 204));
        jPanel9.setLayout(new java.awt.GridLayout(1, 0));

        timeLabel.setBackground(new java.awt.Color(0, 0, 0));
        timeLabel.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        timeLabel.setForeground(new java.awt.Color(255, 255, 255));
        timeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        timeLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        timeLabel.setOpaque(true);
        timeLabel.setPreferredSize(new java.awt.Dimension(100, 100));
        jPanel9.add(timeLabel);

        jPanel8.add(jPanel9, java.awt.BorderLayout.CENTER);

        arrowPanel.setBackground(new java.awt.Color(0, 204, 204));
        arrowPanel.setPreferredSize(new java.awt.Dimension(100, 80));
        arrowPanel.setLayout(new java.awt.GridLayout(1, 0));
        jPanel8.add(arrowPanel, java.awt.BorderLayout.EAST);

        backgroundPanel.add(jPanel8, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(backgroundPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowLostFocus(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowLostFocus
    {//GEN-HEADEREND:event_formWindowLostFocus
        if (!initial)
            t.stop();
    }//GEN-LAST:event_formWindowLostFocus

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowGainedFocus
    {//GEN-HEADEREND:event_formWindowGainedFocus
        if (!initial && !t.isRunning())
            t.start();
    }//GEN-LAST:event_formWindowGainedFocus

    private void actualLightPanelMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_actualLightPanelMouseClicked
    {//GEN-HEADEREND:event_actualLightPanelMouseClicked
        if (t.isRunning())
            t.stop();
        else
            t.start();
    }//GEN-LAST:event_actualLightPanelMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new TrafficLightMain().setVisible(true);
                
            }
        });
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel actualLightPanel;
    private javax.swing.JPanel backgroundPanel;
    private javax.swing.JSlider greenSlider;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JSlider orangeSlider;
    private javax.swing.JSlider redSlider;
    private javax.swing.JButton startButton;
    private javax.swing.JButton stopButton;
    private javax.swing.JLabel timeLabel;
    // End of variables declaration//GEN-END:variables
    
    // Subpanel for the image label.
    class lightPanel extends JPanel
    {
        @Override
        protected void paintComponent(Graphics g) 
        {
            super.paintComponent(g);
            g.drawImage(lightLabel.getImage(), 0, 0, super.getWidth(), super.getHeight(), null);
        }
    }
    
    // Subpanel for the arrow.
    class arrowPanel extends JPanel
    {
        @Override
        protected void paintComponent(Graphics g) 
        {
            super.paintComponent(g);
            if (green)
                g.drawImage(greenArrow.getImage(), 0, 0, super.getWidth(), super.getHeight(), null);
            else
                g.drawImage(redArrow.getImage(), 0, 0, super.getWidth(), super.getHeight(), null);
            
            if (shutDown)
                g.drawImage(darkArrow.getImage(), 0, 0, super.getWidth(), super.getHeight(), null);
        }
    }
    
    // Subpanel for the actual lights.
    class trafficLightPanel extends JPanel
    {
        int width;
        int radius;
        int updown;
        
        @Override
        protected void paintComponent(Graphics g) 
        {
            super.paintComponent(g);
            
            width = super.getWidth()/4;
            radius = width-10;
            updown = (super.getHeight()-30)/3;
            
            // Elevator outer box
            g.fillRoundRect(super.getWidth()/2-(width/2), 5, width, super.getHeight()-10, 10, 10);
            
            if (currentLight.equals("green"))
            {
                g.setColor(Color.darkGray);
                g.fillOval(super.getWidth()/2-(radius/2), 10, radius, updown);
                g.setColor(Color.darkGray);
                g.fillOval(super.getWidth()/2-(radius/2), updown+15, radius, updown);
                g.setColor(Color.green);
                g.fillOval(super.getWidth()/2-(radius)/2, updown*2+20, radius, updown);
            }
            
            else if (currentLight.equals("orange"))
            {
                g.setColor(Color.darkGray);
                g.fillOval(super.getWidth()/2-(radius/2), 10, radius, updown);                
                g.setColor(orangeOn);
                g.fillOval(super.getWidth()/2-(radius/2), updown+15, radius, updown);
                g.setColor(Color.darkGray);
                g.fillOval(super.getWidth()/2-(radius)/2, updown*2+20, radius, updown);
            }
            else if (currentLight.equals("red"))
            {
                g.setColor(Color.red);
                g.fillOval(super.getWidth()/2-(radius/2), 10, radius, updown);
                g.setColor(Color.darkGray);
                g.fillOval(super.getWidth()/2-(radius/2), updown+15, radius, updown);
                g.setColor(Color.darkGray);
                g.fillOval(super.getWidth()/2-(radius)/2, updown*2+20, radius, updown);
            }
            if (shutDown == true)
            {
                g.setColor(Color.darkGray);
                g.fillOval(super.getWidth()/2-(radius/2), 10, radius, updown);
                g.setColor(Color.darkGray);
                g.fillOval(super.getWidth()/2-(radius/2), updown+15, radius, updown);
                g.setColor(Color.darkGray);
                g.fillOval(super.getWidth()/2-(radius)/2, updown*2+20, radius, updown);
            }
            
        }
    }
    
    // Slider listeners
    class SliderListener implements ChangeListener
    {
        @Override
        public void stateChanged(ChangeEvent e)
        {
            JSlider source = (JSlider)e.getSource();
            if (!source.getValueIsAdjusting()) 
            {
               if (source == greenSlider)
               {
                   tl.updateGreenTime(source.getValue());
               }
               else if (source == orangeSlider)
               {
                   tl.updateOrangeTime(source.getValue());
               }
               else
               {
                   tl.updateRedTime(source.getValue());
               }
            }   
        }
    }
    
    // Timer listener
    class TimerListener implements ActionListener
    {
        int tGreenTime = 5;
        int tOrangeTime = 5;
        int tRedTime = 5;
        
        public void updateGreenTime(int t)
        {
            tGreenTime = t;
        }
        
        public void updateOrangeTime(int t)
        {
            tOrangeTime = t;
        }
        
        public void updateRedTime(int t)
        {
            tRedTime = t;
        }
        
        boolean goneThrough = false;
        
        @Override
        public void actionPerformed(ActionEvent e)
        {
            if (goneThrough == false)
            {
                tGreenTime = greenSlider.getValue();
                tOrangeTime = orangeSlider.getValue();
                tRedTime = orangeSlider.getValue();
                goneThrough = true;
            }
            
            if (currentLight.equals("green"))
            {
                timeLabel.setForeground(Color.green);
                backgroundPanel.setBackground(Color.green);
                green = true;
                timeLabel.setForeground(Color.green);
                backgroundPanel.setBackground(Color.green);
                
                if (tGreenTime>0)
                {
                    timeLabel.setText(""+tGreenTime);
                    tGreenTime--;
                }
                else if (tGreenTime==0)
                {
                    timeLabel.setText("");
                    currentLight = "orange";
                    green = false;
                }
            }
            if (currentLight.equals("orange"))
            {
                timeLabel.setForeground(orangeOn);
                backgroundPanel.setBackground(orangeOn);
                
                if (tOrangeTime>0)
                {
                    timeLabel.setText(""+tOrangeTime);
                    tOrangeTime--;
                }
                else if (tOrangeTime == 0)
                {
                    currentLight = "red";
                    timeLabel.setText("");
                }
            }
            if (currentLight.equals("red"))
            {
                green = false;
                timeLabel.setForeground(Color.red);
                backgroundPanel.setBackground(Color.red);
                
                if (tRedTime>1)
                {
                    timeLabel.setText(""+tRedTime);
                    tRedTime--;
                }
                else if (tRedTime == 1)
                {
                    goneThrough = false;
                    currentLight = "green";
                    timeLabel.setText("1");
                }
            }
        }
        
    }
    
    class ButtonListener implements ActionListener
    {
        @Override
        public void actionPerformed(ActionEvent e)
        {
            if (e.getSource() == startButton)
            {
                t.start();
                currentLight = "green";
                shutDown = false;
                initial = false;
                startButton.setEnabled(false);
                stopButton.setEnabled(true);
            }
            else
            {
                t.stop();
                backgroundPanel.setBackground(Color.black);
                timeLabel.setText("");
                green = false;
                shutDown = true;
                actualLightPanel.repaint();
                greenSlider.setValue(5);
                orangeSlider.setValue(5);
                redSlider.setValue(5);
                stopButton.setEnabled(false);
                startButton.setEnabled(true);
            }
        }
        
    }
    class GoToFocusListener implements FocusListener
    {
        @Override
        public void focusLost(FocusEvent e)
        {
            t.stop();
        }
        
        @Override public void focusGained(FocusEvent e)
        {
            t.start();
        }
    }

}
